openapi: 3.0.3
info:
  title: User Management API
  description: API for user management operations
  version: 0.0.1
servers:
  - url: http://localhost:7070/api
    description: Local development server
tags:
  - name: Authentication
  - name: User Management

paths:
  /users/all:
    get:
      summary: Get all users
      operationId: getAllUsers
      tags:
        - User Management
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: Basic Error Response

  /users/by-email:
    get:
      summary: Find a user by email
      operationId: findByEmail
      tags:
        - User Management
      parameters:
        - name: email
          in: query
          description: Email address of the user to find
          required: true
          schema:
            type: string
            format: email
            pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '204':
          description: User not found (no content)
        default:
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: Basic Error Response

  /basic/login:
    post:
      tags:
        - Authentication
      summary: Login with basic authentication
      operationId: loginByBasic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - invalid input parameters
          content:
            text/plain:
              schema:
                type: string
                example: Email and password must be provided.
        '401':
          description: Unauthorized - invalid credentials
          content:
            text/plain:
              schema:
                type: string
                example: Invalid username or password
        default:
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: Basic Error Response
  
  /basic/register:
    post:
      tags:
        - Authentication
      summary: Register a new user with basic authentication
      operationId: registerByBasic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - invalid input parameters
          content:
            text/plain:
              schema:
                type: string
                example: All fields must be provided correctly.
        '409':
          description: Conflict - user already exists or registration failed
          content:
            text/plain:
              schema:
                type: string
                example: User already exists or registration failed.
        default:
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: Basic Error Response
  
  /auth/google/login:
    post:
      summary: Login with Google authentication
      operationId: loginByGoogle
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - invalid input parameters
          content:
            text/plain:
              schema:
                type: string
                example: Email and passkey must be provided.
        '401':
          description: Unauthorized - invalid credentials
          content:
            text/plain:
              schema:
                type: string
                example: Invalid username or password
  
  /auth/google/register:
    post:
      summary: Register a new user with Google authentication
      operationId: registerByGoogle
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - invalid input parameters
          content:
            text/plain:
              schema:
                type: string
                example: All fields must be provided correctly.
        '409':
          description: Conflict - user already exists or registration failed
          content:
            text/plain:
              schema:
                type: string
                example: User already exists or registration failed.
        default:
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: Basic Error Response

components:
  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - passkey
      properties:
        email:
          type: string
          format: email
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          minLength: 5
          maxLength: 255
          example: user@example.com
        passkey:
          type: string
          minLength: 6
          maxLength: 100
          example: secretpassword
    
    RegisterRequest:
      type: object
      required:
        - email
        - passkey
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          minLength: 5
          maxLength: 255
          example: newuser@example.com
        passkey:
          type: string
          minLength: 6
          maxLength: 100
          example: newuserpassword
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-ZáéíóöőúüűÁÉÍÓÖŐÚÜŰ\\s-]+$'
          example: John
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-ZáéíóöőúüűÁÉÍÓÖŐÚÜŰ\\s-]+$'
          example: Doe
    
    User:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          example: 1
        email:
          type: string
          format: email
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          example: user@example.com
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-ZáéíóöőúüűÁÉÍÓÖŐÚÜŰ\\s-]+$'
          example: John
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-ZáéíóöőúüűÁÉÍÓÖŐÚÜŰ\\s-]+$'
          example: Doe
        role:
          type: string
          enum:
            - ADMIN
            - STUDENT
            - GUEST
            - COORDINATOR
          example: STUDENT
          description: User role that determines permissions

    ErrorModel:
      required:
        - status
        - title
        - detail
      type: object
      properties:
        status:
          maxLength: 13
          pattern: '^\d{3}(-\d{3,9}){0,1}$'
          type: string
          description: >
            The HTTP Status code returned by the service or its extended version.
            
            Pl.:
              * 400     : Bad Request
              * 400-012 : Specific error
          example: 400-012
        title:
          $ref: '#/components/schemas/TextType'
        detail:
          $ref: '#/components/schemas/LargeTextType'
      additionalProperties: false
      description: >
        ### Általános hiba leíró

        ***

        Minden hiba esetén ezt az általános hiba osztályt adja vissza az API.

        Például:
          `HTTP/1.1 500 Bad Request`
          `Content-Type: application/problem+json`
          ```json
          {
            ...
            'error' : {
            'status' : '400-012',
            'title' : 'Bad Request',
            'detail': 'A name paraméter érvénytelen értéket tartalmaz'
            }
            ...              
          }
          ```

    TextType:
      maxLength: 1024
      pattern: ^(.|\s)*$
      type: string
    LargeTextType:
      maxLength: 1048576
      pattern: ^(.|\s)*$
      type: string