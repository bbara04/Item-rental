openapi: 3.0.3
info:
  title: User Management API
  description: API for user management operations
  version: 0.0.1
servers:
  - url: http://localhost:7070/api
    description: Local development server
tags:
  - name: Authentication
  - name: User Management
  - name: Item Management
  - name: Transaction Management

paths:
  /users/all:
    get:
      summary: Get all user
      operationId: getAllUser
      tags:
        - User Management
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: Basic Error Response

  /users/by-email:
    get:
      summary: Find a user by email
      operationId: findByEmail
      tags:
        - User Management
      parameters:
        - name: email
          in: query
          description: Email address of the user to find
          required: true
          schema:
            type: string
            format: email
            pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '204':
          description: User not found (no content)
        default:
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: Basic Error Response

  /users/{id}:
    get:
      summary: Get the id's userdata
      operationId: getUserdataById
      tags:
        - User Management
      parameters:
        - name: id
          in: path
          description: Identifier of the User
          style: simple
          explode: false
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: Basic Error Response

    patch:
      summary: Update the id's userdata
      operationId: updateUserdataById
      tags:
        - User Management
      parameters:
        - name: id
          in: path
          description: Identifier of the User
          style: simple
          explode: false
          required: true
          schema:
            type: string
      requestBody:
        description: The CustomerBalance to be created
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/UserPatchRequest'
        required: true
      responses:
        '200':
          description: User found, operation successfully commited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: Basic Error Response
      x-codegen-request-body-name: PatchUser
    delete:
      tags:
        - User Management
      description: Delete user by Id
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          description: Identifier of the User
          style: simple
          explode: false
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User successfully deleted
          content:
            application/json: {}
        default:
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: Basic Error Response

  /auth/basic/login:
    post:
      tags:
        - Authentication
      summary: Login with basic authentication
      operationId: loginByBasic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - invalid input parameters
          content:
            text/plain:
              schema:
                type: string
                example: Email and password must be provided.
        '401':
          description: Unauthorized - invalid credentials
          content:
            text/plain:
              schema:
                type: string
                example: Invalid username or password
        default:
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: Basic Error Response
  
  /auth/basic/register:
    post:
      tags:
        - Authentication
      summary: Register a new user with basic authentication
      operationId: registerByBasic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - invalid input parameters
          content:
            text/plain:
              schema:
                type: string
                example: All fields must be provided correctly.
        '409':
          description: Conflict - user already exists or registration failed
          content:
            text/plain:
              schema:
                type: string
                example: User already exists or registration failed.
        default:
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: Basic Error Response
  
  /auth/google/login:
    post:
      summary: Login with Google authentication
      operationId: loginByGoogle
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - invalid input parameters
          content:
            text/plain:
              schema:
                type: string
                example: Email and passkey must be provided.
        '401':
          description: Unauthorized - invalid credentials
          content:
            text/plain:
              schema:
                type: string
                example: Invalid username or password
  
  /auth/google/register:
    post:
      summary: Register a new user with Google authentication
      operationId: registerByGoogle
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - invalid input parameters
          content:
            text/plain:
              schema:
                type: string
                example: All fields must be provided correctly.
        '409':
          description: Conflict - user already exists or registration failed
          content:
            text/plain:
              schema:
                type: string
                example: User already exists or registration failed.
        default:
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: Basic Error Response

  /items/all:
    get:
      summary: Get all items
      operationId: getAllItems
      tags:
        - Item Management
      responses:
        '200':
          description: List of all items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: Basic Error Response

components:
  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - passkey
      properties:
        email:
          type: string
          format: email
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          minLength: 5
          maxLength: 255
          example: user@example.com
        passkey:
          type: string
          minLength: 6
          maxLength: 100
          example: secretpassword
    
    RegisterRequest:
      type: object
      required:
        - email
        - passkey
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          minLength: 5
          maxLength: 255
          example: newuser@example.com
        passkey:
          type: string
          minLength: 6
          maxLength: 100
          example: newuserpassword
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-ZáéíóöőúüűÁÉÍÓÖŐÚÜŰ\\s-]+$'
          example: John
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-ZáéíóöőúüűÁÉÍÓÖŐÚÜŰ\\s-]+$'
          example: Doe
    
    User:
      required:
        - id
        - userName
        - email
        - firstName
        - lastName
        - role
        - balance
        - university
        - faculty
      type: object
      description: Represents a user in the system with all their profile information
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          example: 123456
          description: Unique identifier for the user
        userName:
          type: string
          description: User's unique username in the system
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9._-]+$'
          example: "janos_nagy"
        email:
          type: string
          format: email
          description: User's email address for login and notifications
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          minLength: 5
          maxLength: 255
          example: "user@example.com"
        firstName:
          type: string
          description: User's first name, supports Hungarian characters
          minLength: 2
          maxLength: 100
          pattern: '^[a-zA-ZáéíóöőúüűÁÉÍÓÖŐÚÜŰ\\s-]+$'
          example: "John"
        lastName:
          type: string
          description: User's last name, supports Hungarian characters
          pattern: '^[a-zA-ZáéíóöőúüűÁÉÍÓÖŐÚÜŰ\\s-]+$'
          minLength: 2
          maxLength: 100
          example: "Nagy"
        passwordHash:
          type: string
          description: Hashed password (typically not returned in responses)
          format: password
          minLength: 60
          maxLength: 255
          example: "$2a$10$N9qo8uLOickgx2ZMRZoMyeIjZAgcfl7p92ldGxad68LJZdL17lhWy"
        loginType:
          type: string
          description: Method used for authentication
          enum: [ "LOCAL", "GOOGLE", "FACEBOOK" ]
          example: "LOCAL"
        ratings:
          type: number
          format: float
          description: Average rating of the user based on past transactions
          minimum: 0
          maximum: 5
          example: 4.7
        description:
          type: string
          description: User's description or bio
          maxLength: 2000
          example: "Egyetemi hallgató vagyok, és szeretek sporteszközöket kölcsönadni."
        balance:
          $ref: '#/components/schemas/Balance'
        university:
          $ref: '#/components/schemas/University'
        faculty:
          $ref: '#/components/schemas/Faculty'
        role:
          type: string
          enum:
            - ADMIN
            - STUDENT
            - GUEST
            - COORDINATOR
          example: STUDENT
          description: User role that determines permissions

    Item:
      required:
        - id
        - name
        - description
        - category
        - costPerDay
        - availability
        - image
      type: object
      description: Represents an item in the system with all their information
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          example: 123456
          description: Unique identifier for the user
        name:
          type: string
          description: Item's name in the system
          minLength: 3
          maxLength: 100
          example: "Macbook Pro 16 2019"
        description:
          type: string
          description: Item's description in the system
          minLength: 3
          maxLength: 100
          example: "Apple Macbook Pro 16 inch, 64gb RAM, 1TB SSD, Made in 2024"
        categories:
          type: array
          items:
            type: string
          description: Item's categories, which is helpful for filtering
          example: ["Laptop", "Electronics", "Computer"]
        costPerDay:
          type: number
          format: float
          minimum: 0.0
          maximum: 5.0
          description: "A rating value between 0.0 and 5.0"
          example: 4.5
        availability:
          type: integer
          format: int64
          description: "Number of available items"
          minimum: 0
          example: 5
        image:
          $ref: '#/components/schemas/Image'

    Balance:
      type: object
      description: Represents the financial balance of a user
      required:
        - currentValue
        - unit
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the balance record
          example: 987654
        userID:
          type: integer
          format: int64
          description: Unique identifier for owner of the balance
        currentValue:
          type: number
          format: float
          description: Current balance amount in the system's currency
          example: 25000.50
          minimum: 0
        unit:
          type: string
          description: Current balance's currency
          example: "HUF"
        payType:
          type: string
          description: Type of payment method
          example: "card"

    University:
      type: object
      description: Represents a university institution
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the university
          example: 1
        name:
          type: string
          description: Name of the university
          minLength: 2
          maxLength: 200
          example: "Budapesti Műszaki és Gazdaságtudományi Egyetem"
        address:
          type: string
          description: Address of the university
          example: "1111 Budadapest Irinyi utca 42."
        description:
          type: string
          description: Description of the university
          example: "Műszaki egyetem Budapesten, TOP-os"
        website:
          type: string
          description: Website of the university
          example: "bme.hu"
        image:
          $ref: '#/components/schemas/Image'

    Faculty:
      type: object
      description: Represents a faculty within a university
      required:
        - name
        - code
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the faculty
          example: 2
        name:
          type: string
          description: Name of the faculty
          example: "Villamosmérnöki és Informatikai Kar"
        code:
          type: string
          description: Code of the faculty
          example: "VIK"
        description:
          type: string
          description: Description of the university
          example: "BME-nek legjobb kara"
        university:
          $ref: '#/components/schemas/Image'

    Image:
      type: object
      description: Represents an image in the system
      required:
        - id
        - imageData
        - contentType
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the image
          example: 10001
        imageData:
          type: string
          format: byte
          description: Binary representation of the image encoded as base64 string
          example: "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8z8BQDwAEhQGAhKmMIQAAAABJRU5ErkJggg=="
        contentType:
          type: string
          description: MIME type of the image
          pattern: '^image/[a-z+]+$'
          example: "image/jpeg"
        fileName:
          type: string
          description: Original filename of the image
          example: "product_photo.jpg"
        entityType:
          type: string
          description: Type of entity this image belongs to
          example: "item"
        entityId:
          type: integer
          format: int64
          description: ID of the entity this image is associated with
          example: 123

    UserPatchRequest:
      type: object
      description: Request schema for updating user information through PATCH operation
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          example: 123456
          description: Unique identifier for the user
        userName:
          type: string
          description: User's unique username in the system
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9._-]+$'
          example: "janos_nagy"
        email:
          type: string
          format: email
          description: User's email address for login and notifications
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          minLength: 5
          maxLength: 255
          example: "user@example.com"
        firstName:
          type: string
          description: User's first name, supports Hungarian characters
          minLength: 2
          maxLength: 100
          pattern: '^[a-zA-ZáéíóöőúüűÁÉÍÓÖŐÚÜŰ\\s-]+$'
          example: "John"
        lastName:
          type: string
          description: User's last name, supports Hungarian characters
          pattern: '^[a-zA-ZáéíóöőúüűÁÉÍÓÖŐÚÜŰ\\s-]+$'
          minLength: 2
          maxLength: 100
          example: "Nagy"
        ratings:
          type: number
          format: float
          description: Average rating of the user based on past transactions
          minimum: 0
          maximum: 5
          example: 4.7
        description:
          type: string
          description: User's description or bio
          maxLength: 2000
          example: "Egyetemi hallgató vagyok, és szeretek sporteszközöket kölcsönadni."
        balance:
          $ref: '#/components/schemas/Balance'
        university:
          $ref: '#/components/schemas/University'
        faculty:
          $ref: '#/components/schemas/Faculty'
        role:
          type: string
          enum:
            - ADMIN
            - STUDENT
            - GUEST
            - COORDINATOR
          example: STUDENT
          description: User role that determines permissions
        password:
          type: string
          format: password
          description: New password for the user (will be hashed before storage)
          minLength: 8
          maxLength: 128
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$'
          example: "StrongP@ssw0rd"

      # No required fields in the PATCH request since it's a partial update
      # where any combination of fields can be updated
      additionalProperties: false

    ErrorModel:
      required:
        - status
        - title
        - detail
      type: object
      properties:
        status:
          maxLength: 13
          pattern: '^\d{3}(-\d{3,9}){0,1}$'
          type: string
          description: >
            The HTTP Status code returned by the service or its extended version.
            
            Pl.:
              * 400     : Bad Request
              * 400-012 : Specific error
          example: 400-012
        title:
          $ref: '#/components/schemas/TextType'
        detail:
          $ref: '#/components/schemas/LargeTextType'
      additionalProperties: false
      description: >
        ### Általános hiba leíró

        ***

        Minden hiba esetén ezt az általános hiba osztályt adja vissza az API.

        Például:
          `HTTP/1.1 500 Bad Request`
          `Content-Type: application/problem+json`
          ```json
          {
            ...
            'error' : {
            'status' : '400-012',
            'title' : 'Bad Request',
            'detail': 'A name paraméter érvénytelen értéket tartalmaz'
            }
            ...              
          }
          ```

    TextType:
      maxLength: 1024
      pattern: ^(.|\s)*$
      type: string
    LargeTextType:
      maxLength: 1048576
      pattern: ^(.|\s)*$
      type: string