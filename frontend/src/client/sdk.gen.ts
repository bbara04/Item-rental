// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { DeleteUserTransactionData, DeleteUserTransactionResponse, DeleteUserTransactionError, GetAllUserTransactionsData, GetAllUserTransactionsResponse, GetAllUserTransactionsError, UpdateUserTransactionData, UpdateUserTransactionResponse, UpdateUserTransactionError, CreateUserTransactionData, CreateUserTransactionResponse, CreateUserTransactionError, RegisterByGoogleData, RegisterByGoogleResponse, RegisterByGoogleError, LoginByGoogleData, LoginByGoogleResponse, LoginByGoogleError, RegisterByBasicData, RegisterByBasicResponse, RegisterByBasicError, LoginByBasicData, LoginByBasicResponse, LoginByBasicError, DeleteUserByIdData, DeleteUserByIdResponse, DeleteUserByIdError, GetUserdataByIdData, GetUserdataByIdResponse, GetUserdataByIdError, UpdateUserdataByIdData, UpdateUserdataByIdResponse, UpdateUserdataByIdError, GetUserTransactionByIdData, GetUserTransactionByIdResponse, GetUserTransactionByIdError, PatchTransactionByIdData, PatchTransactionByIdResponse, PatchTransactionByIdError, PatchTransactionStatusByIdData, PatchTransactionStatusByIdResponse, PatchTransactionStatusByIdError, DeleteItemByIdData, DeleteItemByIdResponse, DeleteItemByIdError, GetItemsByIdData, GetItemsByIdResponse, GetItemsByIdError, UpdateItemDataByIdData, UpdateItemDataByIdResponse, UpdateItemDataByIdError, FindByEmailData, FindByEmailResponse, FindByEmailError, GetAllUserData, GetAllUserResponse, GetAllUserError, GetAllUniversitiesFacultiesData, GetAllUniversitiesFacultiesResponse, GetAllUniversitiesFacultiesError, GetItemsByCategoryData, GetItemsByCategoryResponse, GetItemsByCategoryError, GetAllItemsData, GetAllItemsResponse, GetAllItemsError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Delete the id's transaction, useful for update the status of transaction
 */
export const deleteUserTransaction = <ThrowOnError extends boolean = false>(options: Options<DeleteUserTransactionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserTransactionResponse, DeleteUserTransactionError, ThrowOnError>({
        url: '/user/{id}/renting-transactions',
        ...options
    });
};

/**
 * Get all renting transactions of the user
 */
export const getAllUserTransactions = <ThrowOnError extends boolean = false>(options: Options<GetAllUserTransactionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllUserTransactionsResponse, GetAllUserTransactionsError, ThrowOnError>({
        url: '/user/{id}/renting-transactions',
        ...options
    });
};

/**
 * Update the id's transaction, useful for update the status of transaction
 */
export const updateUserTransaction = <ThrowOnError extends boolean = false>(options: Options<UpdateUserTransactionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateUserTransactionResponse, UpdateUserTransactionError, ThrowOnError>({
        url: '/user/{id}/renting-transactions',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=utf-8',
            ...options?.headers
        }
    });
};

/**
 * Create renting transaction
 */
export const createUserTransaction = <ThrowOnError extends boolean = false>(options: Options<CreateUserTransactionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserTransactionResponse, CreateUserTransactionError, ThrowOnError>({
        url: '/user/{id}/renting-transactions',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=utf-8',
            ...options?.headers
        }
    });
};

/**
 * Register a new user with Google authentication
 */
export const registerByGoogle = <ThrowOnError extends boolean = false>(options: Options<RegisterByGoogleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterByGoogleResponse, RegisterByGoogleError, ThrowOnError>({
        url: '/auth/google/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Login with Google authentication
 */
export const loginByGoogle = <ThrowOnError extends boolean = false>(options: Options<LoginByGoogleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginByGoogleResponse, LoginByGoogleError, ThrowOnError>({
        url: '/auth/google/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Register a new user with basic authentication
 */
export const registerByBasic = <ThrowOnError extends boolean = false>(options: Options<RegisterByBasicData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterByBasicResponse, RegisterByBasicError, ThrowOnError>({
        url: '/auth/basic/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Login with basic authentication
 */
export const loginByBasic = <ThrowOnError extends boolean = false>(options: Options<LoginByBasicData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginByBasicResponse, LoginByBasicError, ThrowOnError>({
        url: '/auth/basic/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete user by Id
 */
export const deleteUserById = <ThrowOnError extends boolean = false>(options: Options<DeleteUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserByIdResponse, DeleteUserByIdError, ThrowOnError>({
        url: '/users/{id}',
        ...options
    });
};

/**
 * Get the id's userdata
 */
export const getUserdataById = <ThrowOnError extends boolean = false>(options: Options<GetUserdataByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserdataByIdResponse, GetUserdataByIdError, ThrowOnError>({
        url: '/users/{id}',
        ...options
    });
};

/**
 * Update the id's userdata
 */
export const updateUserdataById = <ThrowOnError extends boolean = false>(options: Options<UpdateUserdataByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateUserdataByIdResponse, UpdateUserdataByIdError, ThrowOnError>({
        url: '/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=utf-8',
            ...options?.headers
        }
    });
};

/**
 * Get id's renting transactions
 */
export const getUserTransactionById = <ThrowOnError extends boolean = false>(options: Options<GetUserTransactionByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserTransactionByIdResponse, GetUserTransactionByIdError, ThrowOnError>({
        url: '/transactions/{id}',
        ...options
    });
};

/**
 * Patch renting transaction
 */
export const patchTransactionById = <ThrowOnError extends boolean = false>(options: Options<PatchTransactionByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchTransactionByIdResponse, PatchTransactionByIdError, ThrowOnError>({
        url: '/transactions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=utf-8',
            ...options?.headers
        }
    });
};

/**
 * Patch renting transaction's status
 */
export const patchTransactionStatusById = <ThrowOnError extends boolean = false>(options: Options<PatchTransactionStatusByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchTransactionStatusByIdResponse, PatchTransactionStatusByIdError, ThrowOnError>({
        url: '/transactions/{id}/status',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=utf-8',
            ...options?.headers
        }
    });
};

/**
 * Delete item by Id
 */
export const deleteItemById = <ThrowOnError extends boolean = false>(options: Options<DeleteItemByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteItemByIdResponse, DeleteItemByIdError, ThrowOnError>({
        url: '/items/{id}',
        ...options
    });
};

/**
 * Get the item with the given id
 */
export const getItemsById = <ThrowOnError extends boolean = false>(options: Options<GetItemsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetItemsByIdResponse, GetItemsByIdError, ThrowOnError>({
        url: '/items/{id}',
        ...options
    });
};

/**
 * Update the data of the id's item
 */
export const updateItemDataById = <ThrowOnError extends boolean = false>(options: Options<UpdateItemDataByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateItemDataByIdResponse, UpdateItemDataByIdError, ThrowOnError>({
        url: '/items/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=utf-8',
            ...options?.headers
        }
    });
};

/**
 * Find a user by email
 */
export const findByEmail = <ThrowOnError extends boolean = false>(options: Options<FindByEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindByEmailResponse, FindByEmailError, ThrowOnError>({
        url: '/users/by-email',
        ...options
    });
};

/**
 * Get all user
 */
export const getAllUser = <ThrowOnError extends boolean = false>(options?: Options<GetAllUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllUserResponse, GetAllUserError, ThrowOnError>({
        url: '/users/all',
        ...options
    });
};

/**
 * Get all universities and faculties
 */
export const getAllUniversitiesFaculties = <ThrowOnError extends boolean = false>(options?: Options<GetAllUniversitiesFacultiesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllUniversitiesFacultiesResponse, GetAllUniversitiesFacultiesError, ThrowOnError>({
        url: '/universities/all',
        ...options
    });
};

/**
 * Get all items with the given category
 */
export const getItemsByCategory = <ThrowOnError extends boolean = false>(options: Options<GetItemsByCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetItemsByCategoryResponse, GetItemsByCategoryError, ThrowOnError>({
        url: '/items/by-category',
        ...options
    });
};

/**
 * Get all items
 */
export const getAllItems = <ThrowOnError extends boolean = false>(options?: Options<GetAllItemsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllItemsResponse, GetAllItemsError, ThrowOnError>({
        url: '/items/all',
        ...options
    });
};