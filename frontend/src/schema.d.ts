/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/user/{id}/renting-transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all renting transactions of the user */
        get: operations["getAllUserTransactions"];
        put?: never;
        /** Create renting transaction */
        post: operations["createUserTransaction"];
        /** Delete the id's transaction, useful for update the status of transaction */
        delete: operations["deleteUserTransaction"];
        options?: never;
        head?: never;
        /** Update the id's transaction, useful for update the status of transaction */
        patch: operations["updateUserTransaction"];
        trace?: never;
    };
    "/auth/google/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new user with Google authentication */
        post: operations["registerByGoogle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/google/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login with Google authentication */
        post: operations["loginByGoogle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/basic/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new user with basic authentication */
        post: operations["registerByBasic"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/basic/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login with basic authentication */
        post: operations["loginByBasic"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the id's userdata */
        get: operations["getUserdataById"];
        put?: never;
        post?: never;
        /** @description Delete user by Id */
        delete: operations["deleteUserById"];
        options?: never;
        head?: never;
        /** Update the id's userdata */
        patch: operations["updateUserdataById"];
        trace?: never;
    };
    "/items/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the item with the given id */
        get: operations["getItemsById"];
        put?: never;
        post?: never;
        /** @description Delete item by Id */
        delete: operations["deleteItemById"];
        options?: never;
        head?: never;
        /** Update the data of the id's item */
        patch: operations["updateItemDataById"];
        trace?: never;
    };
    "/users/by-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find a user by email */
        get: operations["findByEmail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all user */
        get: operations["getAllUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/by-category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all items with the given category */
        get: operations["getItemsByCategory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all items */
        get: operations["getAllItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Represents the financial balance of a user */
        Balance: {
            /**
             * Format: int64
             * @description Unique identifier for the balance record
             * @example 987654
             */
            id?: number;
            /**
             * Format: int64
             * @description Unique identifier for owner of the balance
             */
            userID?: number;
            /**
             * Format: float
             * @description Current balance amount in the system's currency
             * @example 25000.5
             */
            currentValue: number;
            /**
             * @description Current balance's currency
             * @example HUF
             */
            unit: string;
            /**
             * @description Type of payment method
             * @example card
             */
            payType?: string;
        };
        /** @description Represents a faculty within a university */
        Faculty: {
            /**
             * Format: int64
             * @description Unique identifier for the faculty
             * @example 2
             */
            id?: number;
            /**
             * @description Name of the faculty
             * @example Villamosmérnöki és Informatikai Kar
             */
            name: string;
            /**
             * @description Code of the faculty
             * @example VIK
             */
            code: string;
            /**
             * @description Description of the university
             * @example BME-nek legjobb kara
             */
            description?: string;
            university?: components["schemas"]["University"];
        };
        /** @description Represents an image in the system */
        Image: {
            /**
             * Format: int64
             * @description Unique identifier for the image
             * @example 10001
             */
            id: number;
            /**
             * Format: byte
             * @description Binary representation of the image encoded as base64 string
             * @example [B@7bede4ea
             */
            imageData: string;
            /**
             * @description MIME type of the image
             * @example image/jpeg
             */
            contentType: string;
            /**
             * @description Original filename of the image
             * @example product_photo.jpg
             */
            fileName?: string;
            /**
             * @description Type of entity this image belongs to
             * @example item
             */
            entityType?: string;
            /**
             * Format: int64
             * @description ID of the entity this image is associated with
             * @example 123
             */
            entityId?: number;
        };
        /** @description Represents an item in the system with all their information */
        Item: {
            /**
             * Format: int64
             * @description Unique identifier for the item
             * @example 123456
             */
            id: number;
            /**
             * @description Item's name in the system
             * @example Macbook Pro 16 2019
             */
            name: string;
            /**
             * @description Item's description in the system
             * @example Apple Macbook Pro 16 inch, 64gb RAM, 1TB SSD, Made in 2024
             */
            description: string;
            /**
             * @description Item's categories, which is helpful for filtering
             * @example [
             *       "Laptop",
             *       "Electronics",
             *       "Computer"
             *     ]
             */
            categories?: string[];
            /**
             * Format: float
             * @description A rating value between 0.0 and 5.0
             * @example 4.5
             */
            costPerDay: number;
            /**
             * Format: int64
             * @description Number of available items
             * @example 5
             */
            availability: number;
            image: components["schemas"]["Image"];
        };
        /** @description Represents a transaction request for a renting process */
        TransactionResponse: {
            /**
             * Format: int64
             * @description Unique identifier for the transaction
             * @example 123456
             */
            id: number;
            item: components["schemas"]["Item"];
            /**
             * Format: int64
             * @description Item's requested number
             * @example 1
             */
            numberOfItem: number;
            /** @enum {string} */
            status: "STARTED" | "PENDING" | "APPROVED" | "DECLINED" | "ARCHIVED" | "DELETED" | "OVERDUE";
            user: components["schemas"]["User"];
            /**
             * Format: date-time
             * @example 2025-02-10T23:00+01:00
             */
            startDate: string;
            /**
             * Format: date-time
             * @example 2025-02-10T23:00+01:00
             */
            endDate: string;
        };
        /** @description Represents a university institution */
        University: {
            /**
             * Format: int64
             * @description Unique identifier for the university
             * @example 1
             */
            id?: number;
            /**
             * @description Name of the university
             * @example Budapesti Műszaki és Gazdaságtudományi Egyetem
             */
            name: string;
            /**
             * @description Address of the university
             * @example 1111
             */
            address?: string;
            /**
             * @description Description of the university
             * @example Műszaki egyetem Budapesten, TOP-os
             */
            description?: string;
            /**
             * @description Website of the university
             * @example bme.hu
             */
            website?: string;
            image?: components["schemas"]["Image"];
        };
        /** @description Represents a user in the system with all their profile information */
        User: {
            /**
             * Format: int64
             * @description Unique identifier for the user
             * @example 123456
             */
            id?: number;
            /**
             * @description User's unique username in the system
             * @example janos_nagy
             */
            userName: string;
            /**
             * @description User's email address for login and notifications
             * @example user@example.com
             */
            email: string;
            /**
             * @description User's first name, supports Hungarian characters
             * @example John
             */
            firstName: string;
            /**
             * @description User's last name, supports Hungarian characters
             * @example Nagy
             */
            lastName: string;
            /**
             * @description Hashed password (typically not returned in responses)
             * @example $2a$10$N9qo8uLOickgx2ZMRZoMyeIjZAgcfl7p92ldGxad68LJZdL17lhWy
             */
            passwordHash?: string;
            /** @enum {string} */
            loginType?: "LOCAL" | "GOOGLE" | "FACEBOOK";
            /**
             * Format: float
             * @description Average rating of the user based on past transactions
             * @example 4.7
             */
            ratings?: number;
            /**
             * @description User's description or bio
             * @example Egyetemi hallgató vagyok, és szeretek sporteszközöket kölcsönadni.
             */
            description?: string;
            balance?: components["schemas"]["Balance"];
            university: components["schemas"]["University"];
            faculty: components["schemas"]["Faculty"];
            /** @enum {string} */
            role: "ADMIN" | "STUDENT" | "GUEST" | "COORDINATOR";
            image?: components["schemas"]["Image"];
        };
        /** @description ### Általános hiba leíró *** Minden hiba esetén ezt az általános hiba osztályt adja vissza az API. Például:   `HTTP/1.1 500 Bad Request`   `Content-Type: application/problem+json`   ```json   {     ...     'error' : {     'status' : '400-012',     'title' : 'Bad Request',     'detail': 'A name paraméter érvénytelen értéket tartalmaz'     }     ...                 }   ```  */
        ErrorModel: {
            /**
             * @description The HTTP Status code returned by the service or its extended version. Pl.:   * 400     : Bad Request   * 400-012 : Specific error
             * @example 400-012
             */
            status: string;
            title: string;
            detail: string;
        };
        /** @description The Transaction to be updated */
        TransactionRequest: {
            /**
             * Format: int64
             * @description Unique identifier for the transaction
             * @example 123456
             */
            id?: number;
            /**
             * @description Unique identifier for the item of the transaction
             * @example 123456
             */
            itemId: string;
            /**
             * @description Unique identifier for the user of the transaction
             * @example 123456
             */
            userId: string;
            /**
             * Format: int64
             * @description Item's requested number
             * @example 1
             */
            numberOfItem: number;
            /**
             * Format: date-time
             * @example 2025-02-10T23:00+01:00
             */
            startDate: string;
            /**
             * Format: date-time
             * @example 2025-02-10T23:00+01:00
             */
            endDate: string;
        };
        /** @description The User to be patched */
        UserRequest: {
            /**
             * Format: int64
             * @description Unique identifier for the user
             * @example 123456
             */
            id: number;
            /**
             * @description User's unique username in the system
             * @example janos_nagy
             */
            userName?: string;
            /**
             * @description User's email address for login and notifications
             * @example user@example.com
             */
            email?: string;
            /**
             * @description User's first name, supports Hungarian characters
             * @example John
             */
            firstName?: string;
            /**
             * @description User's last name, supports Hungarian characters
             * @example Nagy
             */
            lastName?: string;
            /**
             * Format: float
             * @description Average rating of the user based on past transactions
             * @example 4.7
             */
            ratings?: number;
            /**
             * @description User's description or bio
             * @example Egyetemi hallgató vagyok, és szeretek sporteszközöket kölcsönadni.
             */
            description?: string;
            balance?: components["schemas"]["Balance"];
            university?: components["schemas"]["University"];
            faculty?: components["schemas"]["Faculty"];
            /** @enum {string} */
            role?: "ADMIN" | "STUDENT" | "GUEST" | "COORDINATOR";
            image?: components["schemas"]["Image"];
            /**
             * @description Password for the user, for local login or for new password
             * @example StrongP@ssw0rd
             */
            password?: string;
        };
        LoginRequest: {
            /** @example user@example.com */
            email: string;
            /** @example secretpassword */
            passkey: string;
        };
        /** @description The CustomerBalance to be created */
        ItemRequest: {
            /**
             * Format: int64
             * @description Unique identifier for the item
             * @example 123456
             */
            id: number;
            /**
             * @description Item's name in the system
             * @example Macbook Pro 16 2019
             */
            name?: string;
            /**
             * @description Item's description in the system
             * @example Apple Macbook Pro 16 inch, 64gb RAM, 1TB SSD, Made in 2024
             */
            description?: string;
            /**
             * @description Item's categories, which is helpful for filtering
             * @example [
             *       "Laptop",
             *       "Electronics",
             *       "Computer"
             *     ]
             */
            categories?: string[];
            /**
             * Format: float
             * @description A rating value between 0.0 and 5.0
             * @example 4.5
             */
            costPerDay?: number;
            /**
             * Format: int64
             * @description Number of available items
             * @example 5
             */
            availability?: number;
            image?: components["schemas"]["Image"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getAllUserTransactions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Identifier of the User */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of all user's renting transactions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionResponse"][];
                    "application/problem+json": components["schemas"]["TransactionResponse"][];
                };
            };
            /** @description Basic Error Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorModel"];
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    createUserTransaction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Identifier of the User */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json;charset=utf-8": components["schemas"]["TransactionRequest"];
            };
        };
        responses: {
            /** @description User found, operation successfully commited */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionResponse"];
                    "application/problem+json": components["schemas"]["TransactionResponse"];
                };
            };
            /** @description Basic Error Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorModel"];
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    deleteUserTransaction: {
        parameters: {
            query: {
                /** @description Identifier of the Transaction */
                transactionId: string;
            };
            header?: never;
            path: {
                /** @description Identifier of the User */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Transaction found, operation successfully commited */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Basic Error Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorModel"];
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    updateUserTransaction: {
        parameters: {
            query: {
                /** @description Identifier of the Transaction */
                transactionId: string;
            };
            header?: never;
            path: {
                /** @description Identifier of the User */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json;charset=utf-8": components["schemas"]["TransactionRequest"];
            };
        };
        responses: {
            /** @description Item found, operation successfully commited */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionResponse"];
                    "application/problem+json": components["schemas"]["TransactionResponse"];
                };
            };
            /** @description Basic Error Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorModel"];
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    registerByGoogle: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRequest"];
            };
        };
        responses: {
            /** @description User created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                    "text/plain": components["schemas"]["User"];
                    "application/problem+json": components["schemas"]["User"];
                };
            };
            /** @description Bad request - invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                    "text/plain": string;
                    "application/problem+json": string;
                };
            };
            /** @description Conflict - user already exists or registration failed */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                    "text/plain": string;
                    "application/problem+json": string;
                };
            };
            /** @description Basic Error Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorModel"];
                    "text/plain": components["schemas"]["ErrorModel"];
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    loginByGoogle: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Login successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                    "text/plain": components["schemas"]["User"];
                };
            };
            /** @description Bad request - invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                    "text/plain": string;
                };
            };
            /** @description Unauthorized - invalid credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                    "text/plain": string;
                };
            };
        };
    };
    registerByBasic: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
            };
        };
        responses: {
            /** @description User created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                    "text/plain": components["schemas"]["User"];
                    "application/problem+json": components["schemas"]["User"];
                };
            };
            /** @description Bad request - invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                    "text/plain": string;
                    "application/problem+json": string;
                };
            };
            /** @description Conflict - user already exists or registration failed */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                    "text/plain": string;
                    "application/problem+json": string;
                };
            };
            /** @description Basic Error Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorModel"];
                    "text/plain": components["schemas"]["ErrorModel"];
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    loginByBasic: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Login successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                    "text/plain": components["schemas"]["User"];
                    "application/problem+json": components["schemas"]["User"];
                };
            };
            /** @description Bad request - invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                    "text/plain": string;
                    "application/problem+json": string;
                };
            };
            /** @description Unauthorized - invalid credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                    "text/plain": string;
                    "application/problem+json": string;
                };
            };
            /** @description Basic Error Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorModel"];
                    "text/plain": components["schemas"]["ErrorModel"];
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    getUserdataById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Identifier of the User */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                    "application/problem+json": components["schemas"]["User"];
                };
            };
            /** @description Basic Error Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorModel"];
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    deleteUserById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Identifier of the User */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User successfully deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Basic Error Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorModel"];
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    updateUserdataById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Identifier of the User */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json;charset=utf-8": components["schemas"]["UserRequest"];
            };
        };
        responses: {
            /** @description User found, operation successfully commited */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                    "application/problem+json": components["schemas"]["User"];
                };
            };
            /** @description Basic Error Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorModel"];
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    getItemsById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Identifier of the Item */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The item object with the given id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Item"];
                    "application/problem+json": components["schemas"]["Item"];
                };
            };
            /** @description Basic Error Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorModel"];
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    deleteItemById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Identifier of the User */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Item successfully deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Basic Error Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorModel"];
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    updateItemDataById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Identifier of the Item */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json;charset=utf-8": components["schemas"]["ItemRequest"];
            };
        };
        responses: {
            /** @description User found, operation successfully commited */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Item"];
                    "application/problem+json": components["schemas"]["Item"];
                };
            };
            /** @description Basic Error Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorModel"];
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    findByEmail: {
        parameters: {
            query: {
                /** @description Email address of the user to find */
                email: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                    "application/problem+json": components["schemas"]["User"];
                };
            };
            /** @description User not found (no content) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                    "application/problem+json": components["schemas"]["User"];
                };
            };
            /** @description Basic Error Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorModel"];
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    getAllUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of all users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"][];
                    "application/problem+json": components["schemas"]["User"][];
                };
            };
            /** @description Basic Error Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorModel"];
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    getItemsByCategory: {
        parameters: {
            query: {
                /** @description Category of the item for filtering */
                categoryId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of all items with the given category */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Item"][];
                    "application/problem+json": components["schemas"]["Item"][];
                };
            };
            /** @description Basic Error Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorModel"];
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    getAllItems: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of all items */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Item"][];
                    "application/problem+json": components["schemas"]["Item"][];
                };
            };
            /** @description Basic Error Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorModel"];
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
}
